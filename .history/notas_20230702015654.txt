import React, { useEffect, useState } from 'react';
import axios from 'axios';

const getColorData = async (id) => {
  try {
    const response = await 
    axios.get(`https://pokeapi.co/api/v2/pokemon-color/${id}`);
    return response.data;
  } catch (error) {
    console.log(error);
    throw error;
  }
};

const getTypeData = async (id) => {
  try {
    const response = await axios.get(`https://pokeapi.co/api/v2/type/${id}`);
    return response.data;
  } catch (error) {
    console.log(error);
    throw error;
  }
};

const pokeLinearGradients = {
    grass: "bg-gradient-to-t from-black to-gree-500",
  fire: "bg-gradient-to-t from-black to-red-500",
  water: "bg-gradient-to-b from-blue-900 to-blue-300",
  bug: "bg-gradient-to-b from-green-500 to-lime-300",
  flying: "bg-gradient-to-b from-pink-700 via-red-600 to-red-700",
  fighting: "bg-gradient-to-b from-brown-700 to-red-500",
  poison: "bg-gradient-to-b from-indigo-700 via-purple-500 to-pink-300",
  ghost: "bg-gradient-to-b from-indigo-900 via-blue-900 to-indigo-700",
  rock: "bg-gradient-to-b from-gray-500 via-gray-600 to-gray-200",
  dark: "bg-gradient-to-b from-black via-gray-900 to-gray-500",
  ice: "bg-gradient-to-b from-blue-300 via-blue-400 to-blue-100",
  steel: "bg-gradient-to-b from-gray-600 via-gray-700 to-gray-400",
  dragon: "bg-gradient-to-b from-teal-700 via-teal-500 to-teal-300",
  fairy: "bg-gradient-to-b from-red-700 via-pink-500 to-pink-300",
  electric: "bg-gradient-to-b from-blue-900 via-blue-900 to-blue-300",
  ground: "bg-gradient-to-b from-brown-600 via-brown-400 to-gold-500",
  psychic: "bg-gradient-to-b from-purple-700 via-purple-500 to-pink-500",
  normal: "",     
  };

const PokemonCard = ({ pokemonUrl }) => {
  const [pokemon, setPokemon] = useState(null);
  const [gradients, setGradients] = useState({});
  const [color, setColor] = useState('');

  const formatTypesPokemon = (types = []) => {
    const nameTypes = types.map((type) => type.type.name);
    const titleTypes = nameTypes.join(" / ");
    return titleTypes;
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const { data } = await axios.get(pokemonUrl);
        setPokemon(data);
      } catch (error) {
        console.log(error);
      }
    };

    if (pokemonUrl) {
      fetchData();
    }
  }, [pokemonUrl]);

  useEffect(() => {
    const fetchGradients = async () => {
      try {
        const typeData = await getTypeData(pokemon?.types?.[0]?.type?.name || '');
        const gradients = {};

        typeData.double_damage_to.forEach((type) => {
          gradients[type.name] = `bg-gradient-to-t from-black to-${type.name}-500`;
        });

        setGradients(gradients);
      } catch (error) {
        console.log(error);
      }
    };

    const fetchColor = async () => {
      try {
        const colorData = await getColorData(pokemon?.species?.url || '');
        setColor(colorData.name);
      } catch (error) {
        console.log(error);
      }
    };

    if (pokemon) {
      fetchGradients();
      fetchColor();
    }
  }, [pokemon]);  

  return (
    <article>
      <h2>{pokemon?.name}</h2>
      <section className={`${pokeLinearGradients[pokemon?.types?.[0]?.type?.name] || ''} ${gradients[color] || ''}`}>
        <div>
          <img
            src={pokemon?.sprites?.other["official-artwork"].front_default}
            alt={pokemon?.name}
          />
        </div>
      </section>

      <section>
        <h3>{pokemon?.name}</h3>
        <h5>{formatTypesPokemon(pokemon?.types)}</h5>
        <span>Type</span>

        <hr />

        <section>
          {pokemon?.stats?.slice(0, 4)?.map((stat) => (
            <div key={stat.stat.name}>
              <h6>{stat.stat.name}</h6>
              <span>{stat.base_stat}</span>
            </div>
          ))}
        </section>
      </section>
    </article>
  );
};

export default PokemonCard;


<section>   

  {pokemon?.stats?.map((stat) => (
    <div key={stat.stat.name}>
      <h6>{stat.stat.name}</h6>
      <span>{stat.base_stat}</span>
    </div>
  ))}
</section>

Targerta funcionando totalmtente

////////////////////////////////////////////
<article>
  <section
    className={`relative h-40 ${
      pokeLinearGradients[pokemon?.types[0]?.type?.name]
    }`}
  >
    <div className="absolute px-12 -bottom-14">
      <img
        src={pokemon?.sprites?.other["official-artwork"].
front_default}
        alt={pokemon?.name}
      />
    </div>
  </section>
  {/*secctcion inferior*/}
  <section>
    <h3 className="mt-14">
      {/*NOMBRE DEL POQUEMON - colocar color*/}
      {pokemon?.name}
      </h3>
    {/*tipo de poquemon - centrado y agrandar letras*/}
    <h5>{formatTypesPokemon(pokemon?.types)}</h5>
    <span>Type</span>
    <hr />
  </section>
  <hr />
  <section>
    {/*Generar la lista de stats*/}
    {pokemon?.stats?.slice(0, 4)?.map((stat) => (
      <div key={stat.stat.name}>
        {/*tipido d' atake*/}
        <h6>{stat.stat.name}</h6>
        {/*fuerza del atake*/}
        <span>{stat.base_stat}</span>
      </div>
    ))}
  </section>
</article>
////////////////////////////////////////////





<article className={css`
  display: flex;
  flex-direction: column;
  margin-bottom: 1rem;
`}>
  <section
    className={`relative h-40 ${
      pokeLinearGradients[pokemon?.types[0]?.type?.name]
    }`}
  >
    <div className="absolute px-12 -bottom-14">
      <img
        src={pokemon?.sprites?.other["official-artwork"].front_default}
        alt={pokemon?.name}
      />
    </div>
  </section>
  {/* Secci√≥n inferior */}
  <section>
    <h3 className={css`
      color: #333;
      font-size: 1.2rem;
      margin-top: 14px;
      display: flex;
      width: 173px;
      height: 17px;
      flex-direction: column;
      justify-content: center;
      flex-shrink: 0;
    `}>
      {/* NOMBRE DEL POKEMON - colocar color */}
      {pokemon?.name}
    </h3>
    {/* Tipo de pokemon - centrado y agrandar letras */}
    <h5 className={css`
      text-align: center;
      font-size: 1.2rem;
      font-weight: bold;
    `}>
      {formatTypesPokemon(pokemon?.types)}
    </h5>
    <span>Type</span>
    <hr />
  </section>
  <hr />
  <section>
    {/* Generar la lista de stats */}
    {pokemon?.stats?.slice(0, 4)?.map((stat) => (
      <div key={stat.stat.name}>
        {/* Tipo de ataque */}
        <h6>{stat.stat.name}</h6>
        {/* Fuerza del ataque */}
        <span>{stat.base_stat}</span>
      </div>
    ))}
  </section>
</article>




vescion minituarizadas

return (
  pokemon && (
    <div className="flex flex-col justify-center items-center">
      <div className="flex flex-col justify-center items-center">
        <img
          src={pokemon.sprites.front_default}
          alt={pokemon.name}
          className="w-100 h-100"
        />
      </div>
      <div className="flex flex-col justify-center items-center">
        <h1 className="text-2xl font-bold">{pokemon.name}</h1>
        <h2 className="text-xl font-bold">{formatTypesPokemon(pokemon.
types)}</h2>
      </div>
    </div>
  )
);   
};




//////////////////////////
fondo totalmtente

bg-gradient-to-t from-slate-800 via-blue-500 to-yellow-400
linear-gradient(to top, rgb(30, 41, 59), rgb(59, 130, 246), rgb(250, 204, 21))

bg-gradient-to-t from-yellow-400 via-blue-500 to-sky-600
linear-gradient(to top, rgb(250, 204, 21), rgb(59, 130, 246), rgb(2, 132, 199))

